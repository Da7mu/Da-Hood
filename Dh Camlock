local player = game.Players.LocalPlayer
local mouse = player:GetMouse()
local aimlockEnabled = false
local target = nil

-- Create a Highlight instance
local highlight = Instance.new("Highlight")
highlight.Parent = game.CoreGui -- Prevent accidental removal
highlight.FillColor = Color3.fromRGB(255, 0, 0) -- Red color
highlight.OutlineColor = Color3.fromRGB(255, 255, 255) -- White outline
highlight.FillTransparency = 0.5
highlight.OutlineTransparency = 0
highlight.Enabled = false

-- Function to create a pop-up notification with fade effect
local function showNotification(text)
    if #text > 20 then
        text = string.sub(text, 1, 20) -- Shorten text without adding "..."
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Parent = player.PlayerGui
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 200, 0, 50)
    frame.Position = UDim2.new(1, -220, 1, -70)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.BackgroundTransparency = 0
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(255, 255, 255)
    frame.Parent = screenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = frame
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextScaled = false
    textLabel.TextSize = 18
    textLabel.Text = text
    textLabel.Font = Enum.Font.GothamBold
    textLabel.TextStrokeTransparency = 0.5
    textLabel.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.Parent = frame
    
    -- Tween to fade out
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 2)
    local fadeTween = tweenService:Create(frame, tweenInfo, {BackgroundTransparency = 1})
    local textFadeTween = tweenService:Create(textLabel, tweenInfo, {TextTransparency = 1})
    
    fadeTween:Play()
    textFadeTween:Play()
    
    -- Destroy after fade
    fadeTween.Completed:Connect(function()
        screenGui:Destroy()
    end)
end

local function getNearestPlayerToMouse()
    local nearestPlayer = nil
    local shortestDistance = math.huge
    
    for _, v in pairs(game.Players:GetPlayers()) do
        if v ~= player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = v.Character.HumanoidRootPart
            local screenPoint = workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position)
            local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(mouse.X, mouse.Y)).Magnitude
            
            if distance < shortestDistance then
                shortestDistance = distance
                nearestPlayer = v
            end
        end
    end
    
    return nearestPlayer
end

local function aimlock()
    if not aimlockEnabled or not target then 
        highlight.Enabled = false
        return 
    end
    
    if target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
        local rootPart = target.Character.HumanoidRootPart
        local cam = workspace.CurrentCamera
        cam.CFrame = CFrame.new(cam.CFrame.Position, rootPart.Position)
        
        -- Apply highlight effect
        highlight.Adornee = target.Character
        highlight.Enabled = true
    else
        highlight.Enabled = false
        aimlockEnabled = false
        target = nil
    end
end

game:GetService("RunService").RenderStepped:Connect(aimlock)

mouse.KeyDown:Connect(function(key)
    if key == "q" then
        aimlockEnabled = not aimlockEnabled
        if aimlockEnabled then
            target = getNearestPlayerToMouse()
            if target and target.Character then
                highlight.Adornee = target.Character
                highlight.Enabled = true
                
                -- Show notification of locked-on player with shortened name if needed
                showNotification("Locked on: " .. target.Name)
            else
                aimlockEnabled = false -- Disable if no valid target found
            end
        else
            target = nil
            highlight.Enabled = false
        end
    end
end)
